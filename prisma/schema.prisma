datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String?
  sessions      Session[]
  videos        Video[]
  playlists     Playlist[]
  subscriptions Subscription[]
  payments      Payment[]
  auditEvents   AuditEvent[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Video {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?
  assets      Asset[]
  playlists   PlaylistVideo[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Asset {
  id        String   @id @default(uuid())
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  url       String
  type      String
  createdAt DateTime @default(now())
}

model Playlist {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  name      String
  videos    PlaylistVideo[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model PlaylistVideo {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  order      Int?
  @@id([playlistId, videoId])
}

model Subscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  startDate DateTime @default(now())
  endDate   DateTime?
  status    String
  payments  Payment[]
}

model Payment {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  amount         Float
  currency       String
  status         String
  createdAt      DateTime      @default(now())
}

model AuditEvent {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  entity    String
  entityId  String?
  createdAt DateTime @default(now())
}
